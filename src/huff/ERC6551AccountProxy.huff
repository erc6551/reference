// ERC6551AccountProxy
// modified from https://github.com/jtriley-eth/minimum-viable-proxy/blob/main/huff/UUPSProxy.huff

// -------------------------------------------------------------------------------------------------
// ABI

#define function implementation() view returns (uint256)

// -------------------------------------------------------------------------------------------------
// CONSTANTS

// uint256(keccak256("eip1967.proxy.implementation")) - 1
#define constant PROXY_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc

#define constant WORD_SIZE = 0x20

#define constant CONTRACT_SIZE = 0xf7

#define macro CONSTRUCTOR() = takes (0) returns (0) {
    // STORE IMPLEMENTATION
    [WORD_SIZE]     // [word]
    dup1            // [word, word]
    codesize        // [codesize, word, word]
    sub             // [impl_offset, word]
    returndatasize  // [zero, impl_offset, word]
    codecopy        // []
    returndatasize  // [zero]
    mload           // [impl]
    [PROXY_SLOT]    // [proxy_slot]
    sstore          // []

    // STORE BYTECODE + FOOTER
    [CONTRACT_SIZE]             // [size]
    dup1                        // [size, size]
    __codesize(CONSTRUCTOR)     // [constructor_size, size, size]
    returndatasize              // [zero, constructor_size, size, size]
    codecopy                    // [size]
    returndatasize              // [zero, size]
    return                      // []
}

#define macro MAIN() = takes (0) returns (0) {
    // COPY CALLDATA TO MEMORY
    calldatasize                // [calldatasize]
    returndatasize              // [zero, calldatasize]
    returndatasize              // [zero, zero, calldatasize]
    calldatacopy                // []

    // LOAD CALLDATA SIGNATURE
    0x00 calldataload           // [calldata @ 0x00]
    0xE0 shr                    // [func_sig (calldata @ 0x00 >> 0xE0)]
    __FUNC_SIG(implementation)  // [func_sig(implementation), func_sig]
    eq                          // [func_sig(implementation) == func_sig]
    implementation
    jumpi

    // DELEGATECALL
    returndatasize              // [retsize]
    returndatasize              // [retoffset, retsize]
    calldatasize                // [argsize, retoffset, retsize]
    returndatasize              // [argoffset, argsize, retoffset, retsize]
    [PROXY_SLOT]                // [proxy_slot, argoffset, argsize, retoffset, retsize]
    sload                       // [impl, argoffset, argsize, retoffset, retsize]
    gas                         // [gas, impl, argoffset, argsize, retoffset, retsize]
    delegatecall                // [success]

    // COPY RETURNDATA TO MEMORY
    returndatasize              // [retsize, success]
    0x00                        // [retoffset, retsize, success]
    dup1                        // [memoffset, retoffset, retsize, success]
    returndatacopy              // [success]

    // RETURN IF SUCCESS, ELSE BUBBLE UP ERROR
    call_success                // [call_success, success]
    jumpi                       // []

    // FAILED
    returndatasize              // [retsize]
    0x00                        // [zero, retsize]
    revert                      // []

    // SUCCESS
    call_success:
        returndatasize          // [retsize]
        0x00                    // [zero, retsize]
        return                  // []

    // implementation getter
    implementation:
        [PROXY_SLOT]            // [proxy_slot]
        sload                   // [impl]
        returndatasize          // [0x00, impl] 
        mstore                  // []
        0x20                    // [0x20]
        returndatasize          // [0x00, 0x20]
        return
}

